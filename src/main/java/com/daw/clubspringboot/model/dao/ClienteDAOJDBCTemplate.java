package com.daw.clubspringboot.model.dao;

import com.daw.clubspringboot.model.Cliente;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

/*Spring JDBCTemplate DAO Implementation*/
@Repository("clienteDAOJdbcTemplate")
public class ClienteDAOJDBCTemplate implements ClienteDAO {
    private static final String dbTable="Clientes";
    private static final String[] autoField={"id"}; //Autogenerated field for new records
    private static final String SQL_BUSCAID="SELECT * FROM Clientes where id=?";
    private static final String SQL_BUSCATODOS="SELECT * FROM Clientes";
    private static final String SQL_CREA="INSERT INTO Clientes (nombre,dni,socio, mediopago) VALUES (?,?,?,?)";
    private static final String SQL_ACTUALIZA="UPDATE Clientes set NOMBRE=?, DNI=?, SOCIO=?, MEDIOPAGO=? WHERE id=?";
    private static final String SQL_BORRA="DELETE FROM Clientes WHERE id=?";

    
    @Autowired (required = false)   //Avoid init error whether not DataSource defined in application.properties
    private JdbcTemplate jdbcTemplate;

    
    public ClienteDAOJDBCTemplate() {
    }

    /**
     * Recupera un Cliente del registro actual del RS (MAPPING)
     */
    private static final class ClienteMapper implements RowMapper<Cliente> {

        public Cliente mapRow(ResultSet rs, int rowNum) throws SQLException {
            Cliente c;
            c = new Cliente(rs.getInt("id"),
                    rs.getString("NOMBRE"),
                    rs.getString("DNI"),
                    rs.getBoolean("SOCIO"),
                    rs.getInt("MEDIOPAGO")
            );
            return c;
        }
    }
    
   
    @Override
    public Cliente buscaId(Integer id) {

        Cliente c=null;
        Object[] parameters= new Object[]{id};
        c= jdbcTemplate.queryForObject(SQL_BUSCAID,
                parameters, new ClienteMapper());
        return c;
    }

    @Override
    public List<Cliente> buscaTodos() {
        return jdbcTemplate.query(SQL_BUSCATODOS, new ClienteMapper());
    }

    @Override
    public boolean crea(Cliente c) {
        boolean result=false;

        KeyHolder keyHolder=new GeneratedKeyHolder();

        int row=jdbcTemplate.update(new PreparedStatementCreator() {

            @Override
            public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {
                PreparedStatement stmn = conn.prepareStatement(SQL_CREA,Statement.RETURN_GENERATED_KEYS);
                stmn.setString(1, c.getNombre());
                stmn.setString(2, c.getDni());
                stmn.setBoolean(3, c.isSocio());
                stmn.setInt(4, c.getMedioPago());
                return stmn;
            }
        },
        keyHolder);
        
        if (row>0) {
            result=true;
            int nuevoId=keyHolder.getKey().intValue();
            c.setId(nuevoId);
        }
        return result;
    }

    @Override
    public boolean guarda(Cliente c) {
        boolean result=false;

        int row=jdbcTemplate.update(new PreparedStatementCreator() {
            
            @Override
            public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {
                PreparedStatement stmn = conn.prepareStatement(SQL_ACTUALIZA);
                stmn.setString(1, c.getNombre());
                stmn.setString(2, c.getDni());
                stmn.setBoolean(3, c.isSocio());
                stmn.setInt(4, c.getMedioPago());
                stmn.setInt(5,c.getId());
                return stmn;
            }
        });

        if (row>0) result=true;

        return result;
    }
    @Override    
    public boolean borra(Integer id) {
        boolean result=false;

        int row=jdbcTemplate.update(SQL_BORRA,id);

        if (row>0) result=true;
        
        return result;
    }
}
